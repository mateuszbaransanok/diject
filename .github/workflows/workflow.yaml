name: CI Pipeline

on:
  pull_request:           # Run tests on pull requests
    branches:
      - "**"              # Runs on any pull request branch
  push:
    branches:
      - main              # Runs on any changes pushed to main
  workflow_dispatch:      # Run release manually
    inputs:
      bump:
        description: "Create release"
        required: true
        default: "minor"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        NAME: [black, isort, flake, mypy]  # Run each linter in parallel

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tox
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --quiet --upgrade --upgrade-strategy eager tox

      - name: Run static analysis with tox
        run: |
          . venv/bin/activate
          tox -e ${{ matrix.NAME }}

  unittests:
    runs-on: ubuntu-latest
    needs: static_analysis  # Run unittests after static analysis

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tox
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --quiet --upgrade --upgrade-strategy eager tox

      - name: Run unit tests with tox
        run: |
          . venv/bin/activate
          tox -e unittests

  release:
    runs-on: ubuntu-latest
    needs: [static_analysis, unittests]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    outputs:
      TAG: ${{ steps.tag_name.outputs.TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Retrieve GitHub user information
        run: |
          USERNAME="${{ github.actor }}"
          echo "USER_NAME=${USERNAME}" >> $GITHUB_ENV

      - name: Configure Git user
        run: |
          git config --global user.name "${{ env.USER_NAME }}"
          git config --global user.email "${{ env.USER_NAME }}@users.noreply.github.com"

      - name: Install bump2version
        run: pip install bump2version

      - name: Bump version using bump2version
        run: bump2version ${{ github.event.inputs.bump }}

      - name: Get latest tag
        id: tag_name
        run: |
          TAG=v$(grep "current_version = " .bumpversion.cfg  | sed -e "s/^current_version = //")
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push
          git push origin "${{ env.TAG }}"

      - name: Create Release with GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release for tag: ${{ env.TAG }}"
          gh release create "${{ env.TAG }}" \
            --title "${{ env.TAG }}" \
            --generate-notes \
            --repo "$GITHUB_REPOSITORY"

  deploy:
    runs-on: ubuntu-latest
    needs: [static_analysis, unittests, release]
    permissions:
      id-token: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: "${{ needs.release.outputs.TAG }}"
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.11.0
